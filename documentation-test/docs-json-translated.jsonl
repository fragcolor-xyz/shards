{"description":"The purpose of ReadFile and WriteFile shards is to enable saving and loading of workflow state to and from files. WriteFile serializes the input data and writes it to a file. This allows saving the state of a workflow to disk, so it can be resumed later. ReadFile reads data from a file and deserializes it. This allows loading previously saved workflow state from disk, so the workflow can resume from where it left off. Together, ReadFile and WriteFile provide persistence for Shard workflows. Complex workflows with many steps and branches can be paused, saved to disk with WriteFile, and later loaded and resumed with ReadFile. This is useful for long running workflows that need to survive restarts of the workflow runner.","input":"Ignored.","name":"ReadFile","output":"Any","parameters":{}}
{"description":"Outputs a sequence containing the names of all registered shards.","input":"Ignored.","name":"Shards.Enumerate","output":"A sequence containing the names of all registered shards.","parameters":{}}
{"description":"Asserts that the input is a sequence of integers. It fails if the input is not a sequence or contains non-integer elements.","input":"The input can be any type. It is the value that needs to be validated as a sequence of integers.","name":"ExpectIntSeq","output":"Same as the input, passed through unchanged if validation succeeds.","parameters":{}}
{"description":"Validates that the input is a sequence of floats. If not, it will error.","input":"The input can be any type. It is the value that needs to be validated as a sequence of floats.","name":"ExpectFloatSeq","output":"The output is the same as the input, if the validation passes.","parameters":{}}
{"description":"Checks if the input matches a sequence of vectors of 2 integers and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt2Seq","output":"Unchanged if it matches the expected sequence of vectors of 2 integers.","parameters":{}}
{"description":"Checks if the input matches a sequence of vectors of 8 integers and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt8Seq","output":"Unchanged if it matches the expected sequence of vectors of 8 integers.","parameters":{}}
{"description":"Compares two big integer values represented as bytes and outputs a boolean indicating if they are not equal.","input":"A big integer represented as bytes. This is the main input value to compare against the operand.","name":"BigInt.IsNot","output":"A boolean value indicating if the input value is not equal to the operand value. ","parameters":{"Operand":"The bytes variable or scalar representing the other big integer value to compare against. This allows comparing the input value against a variable operand."}}
{"description":"Constructs a 2 component floating point vector from the given scalar values.","input":"None.","name":"MakeFloat2","output":"A vector of 2 floating point values.","parameters":{"0":"Vector component.","1":"Vector component."}}
{"description":"Constructs a 3 component floating point vector from the given scalar values.","input":"None.","name":"MakeFloat3","output":"A vector of 3 floating point values.","parameters":{"0":"Vector component.","1":"Vector component.","2":"Vector component."}}
{"description":"Constructs a 2 component integer vector from the given scalar values.","input":"None.","name":"MakeInt2","output":"A vector of 16 integers.","parameters":{"0":"Vector component.","1":"Vector component."}}
{"description":"Constructs a 16 component integer vector from the given scalar values.","input":"None.","name":"MakeInt16","output":"A vector of 16 integers.","parameters":{"0":"Vector component.","1":"Vector component.","10":"Vector component.","11":"Vector component.","12":"Vector component.","13":"Vector component.","14":"Vector component.","15":"Vector component.","2":"Vector component.","3":"Vector component.","4":"Vector component.","5":"Vector component.","6":"Vector component.","7":"Vector component.","8":"Vector component.","9":"Vector component."}}
{"description":"Encodes the input Bytes or String into a base64 encoded String.","input":"The input is either Bytes or String data to encode.","name":"ToBase64","output":"The output is a String containing the base64 encoded input data.","parameters":{}}
{"description":"Checks if the input is a Color type and outputs a boolean indicating if it is.","input":"The input can be any type. It is checked against the Color type.","name":"IsColor","output":"The output is a boolean indicating if the input was a Color type.","parameters":{}}
{"description":"Checks if any element in a sequence is greater than or equal to a value.","input":"A sequence and a value to compare each element against.","name":"IsAnyMoreEqual","output":"A boolean indicating if any element is greater than or equal to the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if all elements in a sequence are greater than or equal to a value.","input":"A sequence and a value to compare each element against.","name":"IsAllMoreEqual","output":"A boolean indicating if all elements are greater than or equal to the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if all elements in a sequence are greater than a value.","input":"A sequence and a value to compare each element against.","name":"IsAllMore","output":"A boolean indicating if all elements are greater than the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if any element in a sequence is greater than a value.","input":"A sequence and a value to compare each element against.","name":"IsAnyMore","output":"A boolean indicating if any element is greater than the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if all elements in a sequence match a value.","input":"A sequence to compare each element against.","name":"IsAll","output":"A boolean indicating if all elements match the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if any element in a sequence matches a value.","input":"A sequence to compare each element against.","name":"IsAny","output":"A boolean indicating if any element matches the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Checks if any element in a sequence does not match a value.","input":"A sequence and a value to compare each element against.","name":"IsAnyNot","output":"A boolean indicating if any element does not match the value.","parameters":{"Value":"The value to compare each element in the sequence against."}}
{"description":"Converts the input to a float.","input":"Accepts input of any type.","name":"ToFloat","output":"Input converted to a float.","parameters":{}}
{"description":"Converts the input to a vector of 2 floats.","input":"Accepts input of any type.","name":"ToFloat2","output":"Input converted to a vector of 2 floats.","parameters":{}}
{"description":"Converts the input to a vector of 3 floats.","input":"Accepts input of any type.","name":"ToFloat3","output":"Input converted to a vector of 3 floats.","parameters":{}}
{"description":"Converts the input to a vector of 4 floats.","input":"Accepts input of any type.","name":"ToFloat4","output":"Input converted to a vector of 4 floats.","parameters":{}}
{"description":"Converts the input to a vector of 2 integers.","input":"Accepts input of any type.","name":"ToInt2","output":"Input converted to a vector of 2 integers.","parameters":{}}
{"description":"Converts the input to a vector of 3 integers.","input":"Accepts input of any type.","name":"ToInt3","output":"Input converted to a vector of 3 integers.","parameters":{}}
{"description":"Converts the input to a vector of 4 integers.","input":"Accepts input of any type.","name":"ToInt4","output":"Input converted to a vector of 4 integers.","parameters":{}}
{"description":"Converts the input to a vector of 8 integers.","input":"Accepts input of any type.","name":"ToInt8","output":"Enput converted to a vector of 8 integers.","parameters":{}}
{"description":"Converts the input to a vector of 16 integers.","input":"Accepts input of any type.","name":"ToInt16","output":"Input converted to a vector of 16 integers.","parameters":{}}
{"description":"Converts the input to a color.","input":"Accepts input of any type.","name":"ToColor","output":"Input converted to a color.","parameters":{}}
{"description":"Checks if the input matches a sequence type and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectSeq","output":"Unchanged if it matches the expected sequence type.","parameters":{}}
{"description":"Checks if the input matches a color sequence type and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectColorSeq","output":"Outputs the input unchanged if it matches a color sequence type.","parameters":{}}
{"description":"Checks if the input is a table and outputs the input unchanged. Throws error if not a table.","input":"Accepts input of any type.","name":"ExpectTable","output":"Outputs the input unchanged if it is a table.","parameters":{}}
{"description":"Checks if the input is a wire and outputs the input unchanged. Throws error if not a wire.","input":"Accepts input of any type.","name":"ExpectWire","output":"Outputs the input unchanged if it is a wire.","parameters":{}}
{"description":"Checks if the input is a color and outputs the input unchanged. Throws error if not a color.","input":"Accepts input of any type.","name":"ExpectColor","output":"Outputs the input unchanged if it is a color.","parameters":{}}
{"description":"Checks if the input is bytes and outputs the input unchanged. Throws error if not bytes.","input":"Accepts input of any type.","name":"ExpectBytes","output":"Unchanged if it is bytes.","parameters":{}}
{"description":"Checks if the input is a 4 component float vector and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectFloat4","output":"Unchanged if it is a vector of 4 floating point values.","parameters":{}}
{"description":"Checks if the input is an integer and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt","output":"Outputs the input unchanged if it is an integer.","parameters":{}}
{"description":"Checks if the input is a vector of 3 integers and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt3","output":"Outputs the input unchanged if it is a vector of 3 integers.","parameters":{}}
{"description":"Checks if the input is a vector of 4 integers and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt4","output":"Outputs the input unchanged if it is a vector of 4 integers.","parameters":{}}
{"description":"Checks if the input is a vector of 8 integers and outputs the input unchanged. Throws error if mismatch.","input":"Accepts input of any type.","name":"ExpectInt8","output":"Outputs the input unchanged if it is a vector of 8 integers.","parameters":{}}
{"description":"Checks if the input is audio and outputs the input unchanged. Throws error if not audio.","input":"Accepts input of any type.","name":"ExpectAudio","output":"Outputs the input unchanged if it is audio.","parameters":{}}
{"description":"Checks if the input is a 3 component float vector and outputs true or false.","input":"Accepts input of any type.","name":"IsFloat3","output":"A boolean indicating if the input was a vector of 3 floating point numbers.","parameters":{}}
{"description":"Checks if the input is a 4 component float vector and outputs true or false.","input":"Accepts input of any type.","name":"IsFloat4","output":"A boolean indicating if the input was a vector of 4 floating point numbers.","parameters":{}}
{"description":"Checks if the input is an integer and outputs true or false.","input":"Accepts input of any type.","name":"IsInt","output":"A boolean indicating if the input was an integer.","parameters":{}}
{"description":"Checks if the input is a 2 component integer vector and outputs true or false.","input":"Accepts input of any type.","name":"IsInt2","output":"A boolean indicating if the input was a vector of 2 integers.","parameters":{}}
{"description":"Checks if the input is a 3 component integer vector and outputs true or false.","input":"Accepts input of any type.","name":"IsInt3","output":"A boolean indicating if the input was a vector of 3 integers.","parameters":{}}
{"description":"Checks if the input is a 4 component integer vector and outputs true or false.","input":"Accepts input of any type.","name":"IsInt4","output":"A boolean indicating if the input was a vector of 4 integers.","parameters":{}}
{"description":"Checks if the input is an image and outputs true or false.","input":"Accepts input of any type.","name":"IsImage","output":"A boolean indicating if the input was an image.","parameters":{}}
{"description":"Converts the input shards data to a JSON string representation.","input":"Can be of any type.","name":"ToJson","output":"A JSON string representation of the input value.","parameters":{"Indent":"How many spaces to use as json prettify indent.","Pure":"If the input string is generic pure json rather than shards flavored json."}}
{"description":"Executes WebAssembly modules by loading the provided wasm file, configuring the runtime, linking libraries, finding the entrypoint, calling it with provided arguments, and outputting the stdout/stderr output.","input":"A string that will be passed to stdin of the wasm module.","name":"Wasm.run","output":"A string containing the content written by the wasm module to stdout.","parameters":{"Arguments":"The arguments to pass to the entrypoint function of the loaded WebAssembly module.","CallConstructors":"Whether to explicitly call the __wasm_call_ctors function if it exists to force calling constructors. Defaults to false, but some wasm modules produced by Rust/WASI may need this.","EntryPoint":"The name of the function that will be looked up and called as the entrypoint into the WebAssembly module. Defaults to _start.","Module":"The path to the WebAssembly (.wasm) file to load and run.","ResetRuntime":"Whether to reset/reload the runtime on every activation. Defaults to true. Can be set to false for performance reasons if there are no issues with multiple runs.","StackSize":"The size in kilobytes to configure the stack of the wasm runtime to. Defaults to 1024 KB."}}
{"description":"Executes a SQL query against a SQLite database every time it is activated, and outputs the result.","input":"Accepts a string containing the SQLite query to execute.","name":"DB.Query","output":"A table containing the result set of the query. If the query outputted no rows, outputs an empty table.","parameters":{"Database":"Specifies the SQLite database filename.","Query":"The SQLite query to execute each activation. This parameter specifies the actual SQL query string."}}
{"description":"Executes a raw SQL query string against a SQLite database.","input":"A string containing the full SQL query statement to execute.","name":"DB.RawQuery","output":"The input string unchanged.","parameters":{"Database":"The filename of the sqlite database to connect to. Defaults to shards.db if not provided."}}
{"description":"Unpacks the input bytes into a sequence based on the struct definition string.","input":"A bytes array containing the binary data to unpack.","name":"Unpack","output":"A sequence containing the unpacked data. The sequence order and types will match the struct definition string.","parameters":{"Definition":"A string defining the struct layout e.g. i32 f32 b i8[256] which defines the types and order of members that will be unpacked."}}
{"description":"Retrieves the name of a shard.","input":"Takes in a shard. This is the shard whose name will be retrieved.","name":"Reflect.Name","output":"A string containing the name of the input shard.","parameters":{}}
{"description":"Generates Bytes with random values.","input":"Ignored.","name":"RandomBytes","output":"Random Bytes.","parameters":{"Size":"The number of bytes that the shard will output. Type is Int and has a default value of 32 bytes."}}
{"description":"Generates a random integer value.","input":"Ignored.","name":"RandomInt","output":"Random integer.","parameters":{"Size":"The maximum value to output as an integer literal or variable."}}
{"description":"Casts a ray into the physics simulation and outputs any rigid bodies that were hit by the ray.","input":"A float3 representing the starting point of the ray, and a second float3 representing the direction and length of the ray. This defines the ray to be cast into the physics simulation.","name":"Physics.CastRay","output":"A sequence containing any rigid bodies that were hit by the ray, in order from closest to furthest hit point.","parameters":{}}
{"description":"Creates a kinematic rigid body that can be moved by setting its position and rotation parameters every frame. The rigid body will interpolate between the parameter values each frame.","input":"Ignored.","name":"Physics.KinematicBody","output":"A 4x4 transform matrix representing the interpolated position and rotation of the kinematic rigid body for the current frame.","parameters":{"Name":"The optional variable name to expose the kinematic rigid body to the graph.","Position":"A position that can be set every frame to move the kinematic rigid body.","Rotation":"A rotation that can be set every frame to orient the kinematic rigid body. Can be axis-angle or quaternion.","Shapes":"The shape(s) that represent the collision volume of the rigid body. Can be a single shape or a sequence of shapes."}}
{"description":"Creates a static rigid body that does not move and has infinite mass. It collides with dynamic bodies but does not respond to forces or collisions.","input":"Ignored.","name":"Physics.StaticBody","output":"Outputs the input unchanged.","parameters":{"Name":"The optional variable name to expose the static rigid body to the graph.","Position":"The initial position of the static rigid body. This cannot be changed after creation.","Rotation":"The initial rotation of the static rigid body. This cannot be changed after creation.","Shapes":"The shape(s) that represent the collision volume of the static rigid body. Can be a single shape or a sequence of shapes."}}
{"description":"Creates a ball rigid body that can be added to a physics simulation. The ball is attached to a body in the simulation.","input":"Ignored.","name":"Physics.Ball","output":"Rigid ball body object that can be added to a physics simulation.","parameters":{"Position":"The position of the ball relative to the body it is attached to in the simulation. It is a 3D vector.","Radius":"Specifies the radius of the ball. It is a float value.","Rotation":"The rotation of the shape."}}
{"description":"Activates an ONNX model by running inference on the input data and outputting the output. The model must be provided as a parameter.","input":"A sequence of float values representing the input data to run through the ONNX model.","name":"ONNX.Activate","output":"A sequence of float values representing the output from running the input through the ONNX model.","parameters":{"Model":"A variable containing the ONNX model object to use for running inference on the input data."}}
{"description":"Sends a string message to the connected WebSocket client. The message will be queued and sent asynchronously over the WebSocket connection.","input":"The string message to send to the WebSocket client.","name":"WS.WriteString","output":"The input string unchanged.","parameters":{"Client":"A variable containing a WebSocket client object instance to send the message to."}}
{"description":"A reliable, low-latency UDP server for Shards using IKCP and Boost Asio UDP server. Accepts connections from Network.Client shards. For each new client connection, it spawns a handler wire. Provides reliable packet delivery through IKCP's mechanisms for in-order delivery, retransmission, congestion control, and connection timeout handling. Through IKCP, reduces Round Trime Time by three times compared with TCP.","input":"Ignored.","name":"Network.Server","output":"Outputs the input unchanged.","parameters":{"Address":"The local IP address to bind the UDP server to.","Handler":"An optional wire shard to spawn for each new client connection. The connection is closed when this wire stops.","Port":"The local port number to bind the UDP server to.","Timeout":"The number of seconds of inactivity after which a connection is considered timed out and closed."}}
{"description":"Sends the input variable over the network to a peer.","input":"The value to serialize and send over the network.","name":"Network.Send","output":"Same as the input, unchanged.","parameters":{"Peer":"The peer to send packets to. When not provided, can be infered from the wire context."}}
{"description":"Creates a client connection to a network server. Receives the data and processes it through the Handler's shard(s) flow.","input":"Ignored.","name":"Network.Client","output":"Outputs a peer object representing the client connection to the network server.","parameters":{"Address":"The IP address of the network server to connect to.","Handler":"The flow of shard(s) that will be activated when a network packet is received from the server. The deserialized payload will flow through these shard(s).","Port":"The port number on the network server to connect to."}}
{"description":"Outputs the peer object representing the current client network connection.","input":"Ignored.","name":"Network.Peer","output":"The peer object from the wire context.","parameters":{}}
{"description":"Retrieves the unique ID associated with provided peer, allowing the peer connection to be identified across any part of a program.","input":"Ignored.","name":"Network.PeerID","output":"An integer representing the unique ID of the peer provided.","parameters":{"Peer":"Allows explicitly specifying the peer to extract the ID. If not provided, the default network peer ID from the wire context will be used instead."}}
{"description":"Sends the input data to all peers connected to the Network.Server server in the wire context.","input":"A value to broadcast to all peers.","name":"Network.Broadcast","output":"Same as the input, unchanged.","parameters":{}}
{"description":"Creates a cuboid collision shape that can be attached to a rigid body. The cuboid is positioned and rotated relative to the body according to the Position and Rotation parameters.","input":"Ignored.","name":"Physics.Cuboid","output":"A physics object representing the created cuboid shape.","parameters":{"HalfExtents":"The half-extents (half-size) of the cuboid along its local x, y, and z axes.","Position":"The position of the cuboid relative to the body it is attached to.","Rotation":"The rotation of the cuboid relative to the body it is attached to."}}
{"description":"Retrieves the WindowContext variable from the execution context. The WindowContext contains the window, input master, and other state needed to interact with window input.","input":"None.","name":"Inputs.GetContext","output":"The WindowContext variable. This provides access to the window, input master, and other input state.","parameters":{"_context":"The required WindowContext variable. This provides the actual WindowContext instance that will be outputted."}}
{"description":"Detects keyboard key release events and runs the specified Shards when the key is released.","input":"Ignored.","name":"Inputs.KeyUp","output":"Outputs the input unchanged.","parameters":{"Action":"The Shards to run when the key is released.","Key":"The name of the key to detect release events for.","Repeat":"Whether to trigger on repeated key release events or only on the first release."}}
{"description":"Detects keyboard key press events and runs a shard or sequence of shards when the key is pressed.","input":"Ignored.","name":"Inputs.KeyDown","output":"Any type. Outputs the input unchanged.","parameters":{"Action":"The Shard or sequence of shards to run when the key is pressed.","Key":"The name of the key to detect press events for.","Repeat":"Whether to trigger on repeated key press events (true) or only on the first press (false)."}}
{"description":"Detects mouse button release events and runs the specified Shards when a button is released.","input":"Ignored.","name":"Inputs.MouseUp","output":"Any type. Outputs the input unchanged.","parameters":{"Left":"The shard or sequence of shards to run when the left mouse button is released.","Middle":"The shard or sequence of shards to run when the middle mouse button is released.","Right":"The shard or sequence of shards to run when the right mouse button is released."}}
{"description":"Handles URL/file drop events on the application window by running specified Shards.","input":"Ignored.","name":"Inputs.HandleURL","output":"Outputs the input value unchanged.","parameters":{"Action":"The Shards to execute when a URL/file is dropped on the window. The dropped URL string is passed as input to these Shards."}}
{"description":"Checks if a specific keyboard key is currently held down.","input":"Ignored.","name":"Inputs.IsKeyDown","output":"Outputs true if the specified key is currently held down, false otherwise.","parameters":{"Key":"The name of the key to check the state of."}}
{"description":"Configures mouse settings like visibility, confinement, and relative mode.","input":"Any type. The input is passed through unchanged.","name":"Inputs.Mouse","output":"Any type. Outputs the input unchanged.","parameters":{"Capture":"Whether to confine mouse movement to the application window.","Hidden":"Whether to hide the mouse cursor.","Relative":"Whether to use relative mouse movement reporting."}}
{"description":"Gets the size of the input region in pixels.","input":"None. No input is used.","name":"Inputs.Size","output":"Outputs a 2D integer vector containing the width and height of the input region in pixels.","parameters":{}}
{"description":"Resizes an input image to a target width and height. Uses a high quality resampling algorithm.","input":"An image to resize.","name":"ResizeImage","output":"The resized image.","parameters":{"Height":"The target height to resize the image, contained in a variable or integer literal.","Width":"The target width to resize the image, contained in a variable or integer literal."}}
{"description":"Takes a 3-channel image as input and adds an alpha channel filled with a maximum alpha value (255 for 8-bit images, 65535 for 16-bit images, 1.0 for float images) to produce a 4-channel output image.","input":"An image with 3 channels (typically RGB). The image pixels can be 8-bit unsigned integers, 16-bit unsigned integers, or 32-bit floats.","name":"FillAlpha","output":"An image with 4 channels, with the 4th channel being the alpha channel filled with the maximum alpha value based on the pixel type. The pixel type (8-bit, 16-bit, float) matches the input image.","parameters":{}}
{"description":"Removes the alpha channel from the input image, making it fully opaque.","input":"An image that may or may not have transparency (alpha channel).","name":"StripAlpha","output":"The input image with its alpha channel removed, making it fully opaque.","parameters":{}}
{"description":"Performs a convolution filter on the input image using a kernel of specified radius. It slides the kernel over the image, extracting a tile of pixels under the kernel, multiplying each pixel by the kernel value, and summing the result into an output pixel. This has the effect of applying a filter that can blur, sharpen or otherwise transform the image.","input":"An image to apply the convolution to. It can be of any pixel type and channel count.","name":"Convolve","output":"The convolved image, with the same type, channels, and size as the input image.","parameters":{"Radius":"The radius of the convolution kernel, controlling the size of the area sampled. Kernel size will be (radius2 + 1) x (radius2 + 1). Larger radius results in more blurring/smoothing.","Step":"Controls how many pixels to advance after each convolution calculation. Higher step skips more pixels, meaning less of the image will actually be convolved."}}
{"description":"Takes an image and a 2D integer coordinate as input and outputs the pixel color at that location as an RGBA vector. This allows sampling pixel colors from images.","input":"A 2D integer coordinate representing the position of the pixel to retrieve from the image.","name":"GetImagePixel","output":"An RGBA vector of float or integer pixel values.","parameters":{"AsInteger":"Controls whether to read the pixel as an integer (true) or a float value (false).","Default":"Allows specifying a default RGBA vector of floats or integer values to output if the read fails instead of erroring.","Position":"A 2D coordinate of the pixel to retrieve. An Image in variable or as a literal."}}
{"description":"Sends an HTTP request using the DELETE method to the given URL. Uses Boost.Beast behind the scenes. Refer to Boost.Beast documentation for more details.","input":"Request payload: if string or byte array, encoded as body, else if table encoded as form data.","name":"Http.Delete","output":"Response body. If FullResponse is true, outputs a table with status, headers, and body.","parameters":{"AcceptInvalidCerts":"If we should ignore invalid certificates. This is useful for testing but should not be used in production.","Bytes":"If instead of a string the shard should output bytes.","FullResponse":"If the output should be a table with the full response, including headers and status.","Headers":"Custom headers to add to the request. Default content-type header depends on input","Timeout":"How many seconds to wait for the request to complete. Throws an error if timeout is exceeded.","URL":"The URL to send the DELETE request to."}}
{"description":"Sends an HTTP request using the PUT method to the given URL. Uses Boost.Beast behind the scenes. Refer to Boost.Beast documentation for more details.","input":"The body to send in the PUT request. Can be a string, bytes, or a table that will be form-encoded.","name":"HTTP.Put","output":"Outputs the response body as a string or bytes. If FullResponse is true, outputs a table with status, headers, and body.","parameters":{"AcceptInvalidCerts":"If we should ignore invalid certificates. This is useful for testing but should not be used in production.","Bytes":"Whether to output the response as bytes instead of a string.","FullResponse":"Whether to output the full response object instead of just the body.","Headers":"Custom headers to add to the request. Default content-type header depends on input","Timeout":"The timeout in seconds for the request. Throws an error if timeout is exceeded.","URL":"The URL to send the PUT request to."}}
{"description":"Sends an HTTP request using the POST method to the given URL. Uses Boost.Beast behind the scenes. Refer to Boost.Beast documentation for more details.","input":"The body to send in the POST request. Can be a string, bytes, or a table that will be form-encoded.","name":"Http.Post","output":"Outputs the response body as a string or bytes. If FullResponse is true, outputs a table with status, headers, and body.","parameters":{"AcceptInvalidCerts":"If we should ignore invalid certificates. This is useful for testing but should not be used in production.","Bytes":"Whether to output the response as bytes instead of a string.","FullResponse":"Whether to output the full response object instead of just the body.","Headers":"Custom headers to add to the request. Default content-type header depends on input","Timeout":"The timeout in seconds for the request. Throws an error if timeout is exceeded.","URL":"The URL to send the POST request to."}}
{"description":"Sends an HTTP request using the POST method to the given URL. Uses Boost.Beast behind the scenes. Refer to Boost.Beast documentation for more details.","input":"The body to send in the POST request. Can be a string, bytes, or a table that will be form-encoded.","name":"Http.Get","output":"Outputs the response body as a string or bytes. If FullResponse is true, outputs a table with status, headers, and body.","parameters":{"AcceptInvalidCerts":"If we should ignore invalid certificates. This is useful for testing but should not be used in production.","Bytes":"Whether to output the response as bytes instead of a string.","FullResponse":"Whether to output the full response object instead of just the body.","Headers":"Custom headers to add to the request. Default content-type header depends on input","Timeout":"The timeout in seconds for the request. Throws an error if timeout is exceeded.","URL":"The URL to send the POST request to."}}
{"description":"Sends an HTTP request using the PATCH method to the given URL. Uses Boost.Beast behind the scenes. Refer to Boost.Beast documentation for more details.","input":"The body to send in the PATCH request. Can be a string, bytes, or a table that will be form-encoded.","name":"HTTP.Patch","output":"Outputs the response body as a string or bytes. If FullResponse is true, outputs a table with status, headers, and body.","parameters":{"AcceptInvalidCerts":"If we should ignore invalid certificates. This is useful for testing but should not be used in production.","Bytes":"Whether to output the response as bytes instead of a string.","FullResponse":"Whether to output the full response object instead of just the body.","Headers":"Custom headers to add to the request. Default content-type header depends on input","Timeout":"The timeout in seconds for the request. Throws an error if timeout is exceeded.","URL":"The URL to send the PATCH request to."}}
{"description":"Sends an HTTP response for a request being handled by an Http.Server shard.","input":"The response body, either as a string or bytes.","name":"Http.Response","output":"Outputs the input unchanged.","parameters":{"Headers":"Custom headers to attach to the response. The Status parameter sets the HTTP status code of the response. The Input is used as the response body. Any custom Headers can be added. The shard sends the response back over the socket being handled by the Http.Server and outputs the input unchanged.","Status":"The HTTP status code to output."}}
{"description":"Starts an HTTP server that listens for requests and handles them by spawning a handler wire.","input":"Ignored.","name":"Http.Server","output":"Outputs the input unchanged.","parameters":{"Endpoint":"The IP to listen on.","Handler":"The wire to spawn for each new request.","Port":"The port number to listen on."}}
{"description":"Decodes a URI encoded string by replacing each escape sequence with the corresponding character.","input":"A string potentially containing URI encoded characters.","name":"String.DecodeURI","output":"A decoded string with all URI escape sequences converted back to normal characters.","parameters":{}}
{"description":"Allows mutating parameters of an inner shard by calling mutation shards on those parameters. It indexes parameters of the inner shard and optionally allows specifying mutation shards per parameter index. When mutating, it will either call the mutation shards if provided, or perform a default mutation operation on the parameter value.","input":"The input to the Mutant shard is passed through to the inner shard. Its purpose is to provide the input for the inner shard to operate on.","name":"Mutant","output":"The output of the Mutant shard is the output of the inner shard after mutating its parameters. Its purpose is to output the result of running the inner shard with mutated parameters.","parameters":{"Indices":"The indices of the parameters to mutate in the inner shard. This selects which parameters will be mutated.","Mutations":"Optional mutation shards per indexed parameter of the inner shard. If provided, these will be called to mutate the respective parameter instead of the default mutation.","Options":"A table of options to control mutation behavior. Passed through to the inner shard's mutate method if it has one.","Shard":"The inner shard to mutate the parameters of."}}
{"description":"Evolves and optimizes a subject wire by mutating it over generations and selecting the fittest individuals.","input":"Ignored.","name":"Evolve","output":"Produces a wire with the evolved result.","parameters":{"Coroutines":"The number of coroutines to run on each thread.","Crossover":"The chance that genes will be crossed over between parents when reproducing.","Elitism":"The chance an individual will be kept as-is for the next generation.","Extinction":"The chance an individual will go extinct each generation.","Fitness":"The fitness wire to evaluate individuals and determine their fitness score. This is used to select the fittest individuals.","Mutation":"The chance of mutating an individual's genes when reproducing.","Population":"The number of individuals in each generation.","Threads":"The number of threads to use for parallel execution.","Wire":"The wire to optimize and evolve. This is the subject that will be mutated and evolved over generations."}}
{"description":"Gets the last write time of the file path provided and outputs it as a unix timestamp integer of seconds since the Epoch.","input":"A string containing the file path to get its last write time.","name":"FS.LastWriteTime","output":"An integer containing the last write time of the file path in unix timestamp format of seconds since the Epoch.","parameters":{}}
{"description":"Outputs the parent directory path for the given path input. The path doesn't need to exist in the filesystem.","input":"A string representing an absolute filesystem path. It can be a path to a file, or a path to a directory.","name":"FS.Parent","output":"A string representing the parent directory path of the input path.","parameters":{}}
{"description":"Converts an absolute file path to a path relative to a specified base directory. The path doesn't need to exist in the filesystem.","input":"The absolute file path to convert. This is the path that will be made relative to the base directory.","name":"FS.RelativeTo","output":"The input path converted to be relative to the base directory specified with BasePath.","parameters":{"BasePath":"The base directory to make the input path relative to. This will be prepended to the output path."}}
{"description":"Recursively iterates over the files and directories within a provided absolute path.","input":"A string representing an absolute filesystem path that will be iterated over.","name":"FS.Iterate","output":"The output is a sequence of strings, representing the files found by iterating the input path.","parameters":{"Recursive":"Boolean value controling whether the iteration is recursive into subdirectories."}}
{"description":"Joins the string paths provided in the input sequence into a single path string.","input":"A sequence of string paths to join together.","name":"FS.Join","output":"A string containing the joined paths.","parameters":{}}
{"description":"Encrypts the input bytes using the ChaCha20-Poly1305 authenticated encryption algorithm and the provided encryption key.","input":"The bytes to encrypt. Can be a String or Bytes value.","name":"ChaChaPoly.Encrypt","output":"The encrypted bytes outputted as a Bytes value.","parameters":{"Key":"The encryption key to use. This can be a Bytes value, a String value, or a reference to either of those."}}
{"description":"Decrypts the input payload using ChaCha20-Poly1305 authenticated encryption algorithm with the provided private key.","input":"The payload to be decrypted, previously encrypted using ChaChaPoly.Encrypt.","name":"ChaChaPoly.Decrypt","output":"The decrypted plaintext payload.","parameters":{"Key":"The private key to use for decryption. Must match the key used during encryption using ChaChaPoly.Encrypt."}}
{"description":"Opens a file save dialog to allow the user to select a file path and name to save to. Outputs the selected file path as a string.","input":"None","name":"FS.SaveFileDialog","output":"The selected file path as a string.","parameters":{"CurrentDir":"Allows setting the initial directory opened in the dialog. Takes a string with a valid directory path.","Filters":"Allows filtering files in the dialog by extension. Takes a sequence of strings with valid file extensions."}}
{"description":"Generates a random 32 bytes Ed25519 private key that can be used for signing messages using Ed25519.Sign shard.","input":"Seed value string encoded as a 64 characters hexadecimal (32 bytes) to be used as entropy when generating the random private key. Can be generated e.g., using `RandomBytes | ToHex`.","name":"Ed25519.Seed","output":"A 32 byte array containing the generated Ed25519 private key.","parameters":{}}
{"description":"Extracts the 32 bytes Ed25519 public key from a 32 bytes Ed25519 private key.","input":"A 32 bytes Ed25519 private key. Can be generated using Ed25519.Seed.","name":"Ed25519.PublicKey","output":"The 32 bytes Ed25519 public key corresponding to the input Ed25519 private key.","parameters":{}}
{"description":"An elliptic curve digital signature algorithm. Signs the input message bytes using the provided 32 bytes Ed25519 private key and outputs the 64 bytes signature. Some key advantages of Ed25519 include high speed, small signatures, resistance to side-channel attacks, and avoidance of nonce bias that exists in some alternatives like ECDSA.","input":"The message to sign.","name":"Ed25519.Sign","output":"The 64 bytes Ed25519 signature derived from the private key and input message.","parameters":{"Key":"The 32 bytes Ed25519 private key to use in signing the input message. Can be generated using Ed25519.Seed."}}
{"description":"Verifies a signature against a message using a Ed25519 public key. Outputs true if the signature is valid for the given public key and message.","input":"The signature to verify.","name":"Ed25519.Verify","output":"A boolean indicating if the signature is valid for the provided public key and input signature.","parameters":{"Key":"Used to verify that the input signature was produced by the private key corresponding to this public key. Can be generated using Ed25519.PublicKe`.","Message":"The message that was signed to produce the signature in the input."}}
{"description":"Decodes the input or output of an Ethereum contract function call based on the provided ABI and function name.","input":"This is the data that will be decoded. It's either the hex encoded input data or output data from an Ethereum contract function call.","name":"Eth.DecodeCall","output":"A sequence containing the decoded values outputted by the function call. Each element in the sequence corresponds to an output parameter of the function.","parameters":{"ABI":"Specifies the Application Binary Interface (ABI) of the contract as a JSON string. This provides information about the contract's functions required to decode the call data.","Input":"A boolean indicating whether the input data is the raw function call input rather than the output. This changes how the data is decoded.","Name":"Specifies the name of the contract function to decode the call data for."}}
{"description":"Implements the 64-bit variant of the extremely fast XXHash hashing algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.XXH-64","output":"A fixed-length 8 byte array containing the 64-bit XXH64 hash value.","parameters":{}}
{"description":"Implements the 256-bit variant of the extremely fast BLAKE2 cryptographic hashing algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Blake2-256","output":"A fixed-length 32 byte array containing the 256-bit BLAKE2-256 hash value.","parameters":{}}
{"description":"Implements the 128-bit variant of the extremely fast BLAKE2 cryptographic hashing algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Blake2-128","output":"A fixed-length 16 byte array containing the 128-bit BLAKE2-128 hash value.","parameters":{}}
{"description":"Implements the 512-bit SHA-2 cryptographic hash algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Sha2-512","output":"A fixed-length 64 byte array containing the 512-bit SHA-2 hash value.","parameters":{}}
{"description":"Implements the 512-bit SHA-3 cryptographic hash algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Sha3-512","output":"A fixed-length 64 byte array containing the 512-bit SHA-2 hash value.","parameters":{}}
{"description":"Implements the 512-bit Keccak cryptographic hash algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Keccak-512","output":"A fixed-length 64 byte array containing the 512-bit Keccak-512 hash value.","parameters":{}}
{"description":"Implements the 256-bit Keccak cryptographic hash algorithm.","input":"A (sequence of) byte array or string to be hashed.","name":"Hash.Keccak-256","output":"A fixed-length 64 byte array containing the 256-bit Keccak-256 hash value.","parameters":{}}
{"description":"Generates a random 32 bytes ECDSA private key that can be used for signing messages using the ECDSA.Sign shard.","input":"Seed value string encoded as a 64 characters hexadecimal (32 bytes) to be used as entropy when generating the random private key. Can be generated i.e., using `RandomBytes | ToHex`.","name":"ECDSA.Seed","output":"A 32 byte array containing the generated ECDSA private key.","parameters":{"Compressed":"If the output public key should use the compressed format."}}
{"description":"Extracts the 32 bytes ECDSA public key from a 32 bytes ECDSA private key.","input":"A 32 bytes ECDSA private key. Can be generated using ECDSA.Seed.","name":"ECDSA.PublicKey","output":"The 64 bytes ECDSA public key corresponding to the input ECDSA private key.","parameters":{}}
{"description":"An elliptic curve digital signature algorithm. Signs the input message bytes using the provided 32 bytes ECDSA private key and outputs the 32 bytes signature. Provides fast signature generation and small signature sizes with strong security guarantees.","input":"The message to sign.","name":"ECDSA.Sign","output":"The 64 bytes ECDSA signature derived from the private key and input message.","parameters":{"Key":"The 32 bytes ECDSA private key to use in signing the input message. Can be generated using ECDSA.Seed."}}
{"description":"Verifies a signature against a message using a ECDSA public key. Outputs true if the signature is valid for the given public key and message.","input":"The signature to verify.","name":"ECDSA.Verify","output":"A boolean indicating if the signature is valid for the provided public key and input signature.","parameters":{"Key":"Used to verify that the input signature was produced by the private key corresponding to this public key. Can be generated using ECDSA.PublicKey.","Message":"The message that was signed to produce the signature in the input."}}
{"description":"Applies an impulse force to a rigid body in the physics simulation.","input":"A 3D vector representing the impulse force to apply.","name":"Physics.Impulse","output":"The same 3D impulse force vector that was provided as input.","parameters":{"RigidBody":"Specifies the rigid body that the impulse force should be applied to. It can be passed a reference to a rigid body object or None."}}
{"description":"Decodes a variable length integer encoded in Little Endian Base 128 (LEB128) code compression format into a native integer.","input":"Bytes containing the LEB128 encoded integer.","name":"FromLEB128","output":"The decoded native integer value.","parameters":{"Signed":"A boolean indicating whether the encoded integer is signed (can be negative) or unsigned."}}
{"description":"Encodes the input bytes or string into a base58-encoded string. Typically used to encode a large integer as alphanumeric text.","input":"Can be either bytes or a string. It is the data that will be encoded into a base58 string.","name":"ToBase58","output":"A string containing the base58-encoded input data.","parameters":{}}
{"description":"Outputs the current time in seconds since the Unix epoch.","input":"Ignored.","name":"Time.Epoch","output":"An integer representing the current time in seconds since the Unix epoch (January 1, 1970).","parameters":{}}
{"description":"Outputs the current time in milliseconds since the Unix epoch.","input":"Ignored.","name":"Time.EpochMs","output":"An integer representing the current time in milliseconds since the Unix epoch (January 1, 1970).","parameters":{}}
{"description":"Outputs the elapsed time in milliseconds since initialization of the last shard.","input":"Ignored.","name":"Time.NowMs","output":"A float representing the elapsed time in milliseconds since initialization of the last shard.","parameters":{}}
{"description":"Outputs the elapsed time in seconds since intialization of the last shard.","input":"Ignored.","name":"Time.Now","output":"A float representing the elapsed time in seconds since initialization of the last shard.","parameters":{}}
{"description":"Serializes the input value into a byte array.","input":"Can take any value. The value will be serialized to bytes.","name":"ToBytes","output":"A byte array containing the serialized input value.","parameters":{}}
{"description":"Gets the current mouse position in pixel coordinates.","input":"Ignored.","name":"Inputs.MousePixelPos","output":"A 2D integer vector containing the x and y pixel coordinates of the mouse cursor.","parameters":{}}
{"description":"Writes data to a file.","input":"The data to write to the file. It can be any type.","name":"WriteFile","output":"Output is the same as the input.","parameters":{"Append":"Whether to append to the file if it already exists instead of overwriting it. Default is false.","File":"The path of the file to write to.","Flush":"Whether to flush the file to disk after every write. Default is false."}}
{"description":"Captures logs into a sequence of strings representing the logs.","input":"Ignored.","name":"CaptureLog","output":"A sequence of strings representing the logs.","parameters":{"MinLevel":"The minimum log level to capture. Levels by inclusiveness","Pattern":"String format for the logs, similar to PatternLayout of log4j.","Size":"The maximum number of logs to retain.","Suspend":"TODO."}}
{"description":"Detects when the left, right or middle mouse buttons are pressed down and activates the corresponding parameter shard.","input":"Any input is passed through","name":"Inputs.MouseDown","output":"Outputs the input unchanged.","parameters":{"Left":"A shard to activate when the left mouse button is pressed.","Middle":"A shard to activate when the middle mouse button is pressed.","Right":"A shard to activate when the right mouse button is pressed"}}
{"description":"Generates a random 64 bytes Sr25519 private key that can be used for signing messages using the Sr25519.Sign shard.","input":"Seed value string encoded as a 128 characters hexadecimal (64 bytes) to be used as entropy when generating the random private key. Can be generated i.e., using `RandomBytes(64) | ToHex`.","name":"Sr25519.Seed","output":"A 64 byte array containing the generated Sr25519 private key.","parameters":{}}
{"description":"Extracts the 32 bytes Sr25519 public key from a 64 bytes Sr25519 private key.","input":"A 64 bytes Sr25519 private key. Can be generated using Sr25519.Seed.","name":"Sr25519.PublicKey","output":"The 32 bytes Sr25519 public key corresponding to the input Sr25519 private key.","parameters":{}}
{"description":"An elliptic curve digital signature algorithm. Signs the input message bytes using the provided 64 bytes Sr25519 private key and outputs the 64 bytes signature. Provides fast, compact, quantum-resistant signatures through a simple deterministic algorithm with strong security guarantees.","input":"The message to sign.","name":"Sr25519.Sign","output":"The 64 bytes Sr25519 signature derived from the private key and input message.","parameters":{"Key":"The 64 bytes Sr25519 private key to use in signing the input message. Can be generated using Ed25519.Seed."}}
{"description":"Verifies a signature against a message using a Sr25519 public key. Outputs true if the signature is valid for the given public key and message.","input":"The signature to verify.","name":"Sr25519.Verify","output":"A boolean indicating if the signature is valid for the provided public key and input signature.","parameters":{"Key":"Used to verify that the input signature was produced by the private key corresponding to this public key. Can be generated using Sr25519.PublicKey.","Message":"The message that was signed to produce the signature in the input."}}
{"description":"Splits the input string into a sequence of strings separated by the given separator character.","input":"The string to split.","name":"String.Split","output":"A sequence of strings resulting from splitting the input string on the separator character.","parameters":{"Separator":"The character to use to split the input string."}}
{"description":"Checks if the input string contains the given substring.","input":"The string to search within","name":"String.Contains","output":"True if the input string contains the given substring, false otherwise.","parameters":{"String":"The substring to search for within the input string."}}
{"description":"Removes leading and trailing whitespace from the input string.","input":"The string to trim.","name":"String.Trim","output":"The input string with leading and trailing whitespace removed.","parameters":{}}
{"description":"Searches for matches to the given regular expression in the input string.","input":"A string to search for matches.","name":"Regex.Match","output":"A sequence containing the matched capture groups.","parameters":{"Regex":"The regular expression to match against the input string. It needs to match the whole input string. To capture more than one group, use ()."}}
{"description":"Searches for all matches of the given regular expression in the input string.","input":"A string to search for matches. It serves as the text to apply the regular expression to.","name":"Regex.Search","output":"A sequence of strings, containing all the matches of the regular expression in the input string. It contains the search results.","parameters":{"Regex":"The regular expression pattern to search for. It only needs to match part of the input string."}}
{"description":"Replaces matches of the given regular expression in the input string with the provided replacement expression.","input":"A string input that will be searched for matches to the provided regular expression.","name":"Regex.Replace","output":"A new string with all matches of the regular expression replaced by the provided replacement expression.","parameters":{"Regex":"The regular expression to search for in the input string.","Replacement":"The replacement expression. Can be a string or variable containing the text to replace each match with."}}
{"description":"Searches for the first index of a given item in a sequence input.","input":"A sequence to search through.","name":"IndexOf","output":"The index of the first occurrence of the item parameter in the input sequence. If All parameter is true, outputs a sequence containing all indices where the item occurs or [] if not found. If Al is set to false and item is not found, outputs -1.","parameters":{"All":"Whether to output all indices where the item occurs, or just the first one.","Item":"The item to search for in the input sequence."}}
{"description":"Premultiplies the alpha channel of images with transparency. This is often required for blending and compositing images correctly.","input":"An image with transparency (alpha channel). The alpha channel should not be premultiplied prior to this shard.","name":"PremultiplyAlpha","output":"The input image with its alpha channel premultiplied.","parameters":{}}
{"description":"Creates any missing directories in the provided path. If a directory already exists, it does not attempt to create it.","input":"A string representing the path to create directories for. Path can be relative or absolute.","name":"FS.CreateDirectories","output":"Outputs the path in the input unchanged.","parameters":{}}
{"description":"Generates a stack trace for the current execution context and outputs it as a string. The stack trace shows the call stack of the shards flow that lead to the current point of execution. This can be useful for debugging and understanding the flow of execution.","input":"Ignored.","name":"Process.StackTrace","output":"A string with the stack trace generated for the current execution context.","parameters":{}}
{"description":"Packs the input sequence into a contiguous bytes array based on the struct definition string.","input":"A sequence containing the data to pack. The sequence order and types must match the struct definition string.","name":"Pack","output":"A byte array containing the packed binary data. Can be later unpacked using Unpack.","parameters":{"Definition":"A string defining the struct layout e.g. i32 f32 which defines the types and order of data members."}}
{"description":"Projects a 3D point using a given view-projection matrix, adjusting for screen space coordinates.","input":"A 3D point represented as a vector of 3 floats. This is the point to project.","name":"Math.Project","output":"The projected 2D point represented as a vector of 3 floats.","parameters":{"FlipY":"Whether to flip the Y axis when converting to screen space. Can be a literal or variable.","Matrix":"The 4x4 projection matrix to use. Can be a constant matrix value or a matrix variable.","ScreenSize":"The width and height of the viewport. Used to convert to screen space coordinates. Can be a literal or variable."}}
{"description":"Projects a 3D point to 2D screen space using a view-projection matrix.","input":"A 3D point as a vector of 3 floats.","name":"Math.Project","output":"A 2D projected point as a vector of 3 floats, with XY mapped to screen space and Z for depth.","parameters":{"FlipY":"Whether to flip the Y axis coordinate when converting to screen space.","Matrix":"The 4x4 view-projection matrix to use. Can be a literal or variable.","ScreenSize":"The viewport width and height. Used to map XY to screen coordinates."}}
{"description":"Creates a rotation matrix from an angle in degrees around the Y axis.","input":"This is the angle to rotate around the Y axis. A float representing the angle in degrees. ","name":"Math.AxisAngleY","output":"A Float4 representing a quaternion that encodes the rotation around the Y axis by the input angle.","parameters":{}}
{"description":"Creates a rotation matrix from the given quaternion. The rotation matrix can then be used to rotate vectors and transform coordinate systems.","input":"A quaternion representing the desired rotation. Quaternions are a compact way to represent rotations.","name":"Math.Rotation","output":"A 4x4 rotation matrix encoding the same rotation as the input quaternion. The matrix can be applied to vectors to rotate them according to the quaternion.","parameters":{"Angle":"The angle of rotation in radians."}}
{"description":"Triggers an update on the referenced event dispatcher.","input":"Ignored.","name":"Events.Update","output":"The original input unchanged.","parameters":{"ID":"An optional integer ID used to differentiate events with the same name.","Name":"The name of the event dispatcher to update. This associates the shard instance with a specific event dispatcher."}}
{"description":"Performs a matrix multiplication or product between the input matrix and the operand matrix. The matrices must have compatible dimensions.","input":"A matrix represented as a sequence of float vectors of 2, 3, or 4 elements. This is the first matrix to multiply.","name":"Math.MatMul","output":"A matrix resulting from multiplying the input matrix by the operand matrix. The output matrix has the same dimensions as the input matrix.","parameters":{"Operand":"The second matrix to multiply. The number of columns in the operand matrix must match the number of rows in the input matrix."}}
{"description":"Retrieves the mouse cursor delta movement since the last frame. The delta movement is in pixels.","input":"Ignored.","name":"Inputs.MouseDelta","output":"Outputs a 2D float vector representing the delta mouse movement since the last frame, in pixels. This can be used to implement mouse-based control of visuals, particles, etc.","parameters":{}}
{"description":"Checks if the input is a sequence type, outputing a boolean indicating if it is a sequence or not.","input":"The value that is checked to determine if it is a sequence type.","name":"IsSeq","output":"A boolean value indicating if the input is a sequence or not.","parameters":{}}
{"description":"Allows executing a custom function pointer, taking in a context and variable pointer as arguments. This enables calling into unsafe code from a shards graph.","input":"Any variable that will be passed to the unsafe function. It has no restrictions on the type.","name":"UnsafeActivate!","output":"Whatever is outputted by the function pointer, so it can be any type.","parameters":{"Pointer":"Takes a function pointer that will be called with the Context and input variable when the shard is activated."}}
{"description":"Triggers a breakpoint to interrupt execution. Can be used for debugging purposes.","input":"Can accept any input type. The input is passed through unchanged to the output","name":"Assert.Break","output":"Outputs the original input unchanged.","parameters":{}}
{"description":"Converts an hexadecimal string to bytes.","input":"A string containing hexadecimal digits.","name":"HexToBytes","output":"Bytes representing the hexadecimal string provided as input.","parameters":{}}
{"description":"Checks if all elements of a sequence or a vector do not match the value passed to the Value parameter. Outputs true if all elements do not match the value, false otherwise.","input":"Any input is valid. If input is a sequence or a vector, that will be checked to see if all elements do not match the value, otherwise for other types, the input will be treated as a single value to compare.","name":"IsAllNot","output":"A boolean indicating if all elements did not match the value.","parameters":{"Value":"The value to compare each element of the sequence against for inequality."}}
{"description":"Converts a string input to bytes.","input":"A string value that will be converted to bytes.","name":"StringToBytes","output":"Bytes representing the input string.","parameters":{}}
{"description":"Converts bytes into a sequence of integers by interpreting each byte as an integer value ranging 0-255.","input":"The data that will be converted to integers.","name":"BytesToInts","output":"Each integer represents each byte from the input, interpreted as an integer value ranging 0-255 (amounting to the number of combinations a byte can have).","parameters":{}}
{"description":"Converts a sequence of integers into a byte array. Throws error if integer value is outside the range 0-255 (amounting to the number of combinations a byte can have).","input":"A sequence of integer values.","name":"IntsToBytes","output":"A byte array containing the integer sequence data clipped to 0-255.","parameters":{}}
{"description":"Asserts that the input is a vector composed of 3 floats, and outputs the input unchanged. If the input is not a vector of 3 floats, it will throw an error.","input":"The value that will be checked as a vector composed of 3 floats.","name":"ExpectFloat3","output":"The input unchanged.","parameters":{}}
{"description":"Convert a sequence of float values into a bitmap image.","input":"Provides the data points that will be converted into an image representation. Each float value in the sequence represents a pixel intensity or color value, ranging between 0-1.","name":"FloatsToImage","output":"An image constructed from the input sequence of float values.","parameters":{"Channels":"Represents the channels of the output image, ranging between 1-4 channels. like grayscale (1 channel), RGB (3 channels), etc. Intended The purpose of this parameter is to determine the color format of the resulting image.","Height":"Determines the number of row pixels the output image will have.","Width":"Determines how many column pixels the output image will have."}}
{"description":"Outputs true if input is an audio stream, otherwise outputs false.","input":"Accepts any input. The input is checked to determine if it is an audio stream.","name":"IsAudio","output":"Outputs a boolean indicating if the input is an audio stream.","parameters":{}}
{"description":"Takes any input, and outputs a boolean indicating if the input is a table or not.","input":"Can be any type. It is the value that needs to be checked whether it is a table type or not.","name":"IsTable","output":"A boolean indicating if the input is a table type or not.","parameters":{}}
{"description":"Creates an orthographic projection matrix.","input":"Ignored.","name":"Math.Orthographic","output":"A 4x4 float matrix representing the orthographic projection.","parameters":{"Far":"The distance to the far clipping plane from the camera.","Height":"The vertical extent of the view volume.","Near":"The distance to the near clipping plane from the camera.","Width":"The horizontal extent of the view volume."}}
{"description":"Encodes the input image as a PNG file and writes it to the path provided by the File parameter.","input":"An image to be encoded as PNG.","name":"WritePNG","output":"The raw bytes representing the encoded PNG image. This can be written to a file to get the actual image file.","parameters":{"File":"The path to write the PNG file to."}}
{"description":"The SleepBlocking shard pauses the execution of the shards graph for a specified amount of time. It blocks the calling thread during the sleep.","input":"The input can be either an integer representing the sleep time in milliseconds or a float representing the sleep time in seconds. This controls how long the shard will pause the execution for.","name":"SleepBlocking!","output":"The output is the same as the input. The input is simply passed through unchanged.","parameters":{"Amount":"The amount of time to pause execution for, specified in either milliseconds (int) or seconds (float). This parameter controls the duration of the blocking sleep."}}
{"description":"Checks if the input is of floating point type and outputs true or false.","input":"Accepts a value of any type. This is the value that will be checked if it is of floating point type.","name":"IsFloat","output":"Outputs a boolean indicating if the input value is of floating point type or not.","parameters":{}}
{"description":"Creates a dynamic rigid body that is driven by the physics simulation. The position and rotation will be initialized based on the given parameters, but after that will be controlled by physics forces and integration.","input":"None. This shard does not take any input.","name":"Physics.DynamicBody","output":"A 4x4 transform matrix representing the interpolated position and orientation of the rigid body for the current frame. Outputs a single matrix if one rigid body, or a sequence of matrices if multiple rigid bodies were created.","parameters":{"Name":"An optional variable name to expose the rigid body object to the graph. This allows applying forces and reading transforms.","Position":"The initial position to create the rigid body at. For multiple rigid bodies this can be a sequence.","Rotation":"The initial rotation to orient the rigid body. Can be axis-angle or quaternion. For multiple rigid bodies this can be a sequence.","Shapes":"TheCollision shape or compound shapes that represent the collision geometry of this rigid body."}}
{"description":"Executes the given Shards parameter and profiles their execution time. It prints the execution time along with the given Label parameter.","input":"Ignored.","name":"Profile","output":"The output of Profile is the same as the output of the last Shard given in the Shards parameter.","parameters":{"Label":"Takes a string that will be printed along with the profiling information.","Shards":"Takes a sequence of Shards to execute and profile."}}
{"description":"Checks that the input is a boolean value and fails otherwise.","input":"Can be any type. It is the value that will be checked to see if it is a boolean.","name":"ExpectBool","output":"It will be the input value if the check succeeds, otherwise it will fail.","parameters":{}}
{"description":"Passes through the input to the outputs if input is a sequence of strings, otherwise throws an error.","input":"It is the value that needs to be validated as a sequence of strings.","name":"ExpectStringSeq","output":"The same sequence of strings that was passed as input.","parameters":{}}
{"description":"Validates that the input is a sequence of bytes, throwing an error if not. Here bytes reads as each element of the sequence is bytes.","input":"The value that needs to be validated as a sequence of bytes.","name":"ExpectBytesSeq","output":"Outputs the input unchanged if it is a valid sequence of bytes.","parameters":{}}
{"description":"Creates and manages a graphics window that can be used for rendering and receiving input events. Handles creating the OS window, managing input events, and cleaning up resources when closed.","input":"Ignored.","name":"GFX.MainWindow","output":"Outputs a WindowContext object that can be used to access the created window.","parameters":{"Contents":"The shards wire to run that will have access to the created window.","DetachRenderer":"When enabled, no default graphics renderer will be available to the contents wire.","HandleCloseEvent":"When false, the close event will not be handled and abort the wire the window is running in. True by default.","Height":"The height of the window to create in pixels. Uses OS DPI scaling","Title":"The title of the window to create.","UseDisplayScaling":"When enabled, the window size will be scaled using the OS's provided scaling value. True by default.","Width":"The width of the window to create in pixels. Uses OS DPI scaling."}}
{"description":"Generates a view matrix from a position and a target in world space. The matrix transforms world space to view space.","input":"A table with keys Position and Target, each containing a 3D float vector. Position is the location of the camera in world space. Target is the point in world space the camera should look at.","name":"Math.LookAt","output":"A 4x4 float matrix representing the view transform from world space to view space based on the input position and target.","parameters":{"Position":"The position of the camera in world space.","Target":"The point in world space the camera should look at."}}
{"description":"Runs and activates a wire inline, detached, or stepped based on the Mode parameter. It executes the wire's flow and outputs the wire's output.","input":"Can be any type and is passed through to the wire to use as its initial input.","name":"WireRunner","output":"Output of the wire after it has been run. Can be any type depending on the wire.","parameters":{"Mode":"An enum that controls how the wire is run - either Inline, Async, or Stepped. Inline runs the wire inline and coupled to the parent wire. Async runs the wire detached in parallel. Stepped runs the wire as a child and ticks it each activation."}}
{"description":"Converts a JSON string into its corresponding data structure.","input":"Accepts a JSON-formatted string.","name":"FromJson","output":"A data structure derived from the JSON string.","parameters":{"Pure":"A boolean value indicating if the input string is standard JSON (true by default) or shards-specific JSON."}}
{"description":"Checks if any element in the input sequence is less than the value specified by the Value parameter.","input":"This sequence will be iterated and each element compared to the Value parameter.","name":"IsAnyLess","output":"A boolean indicating if any of the elements in the input sequence are less than the Value.","parameters":{"Value":"The value to compare each element of the input sequence against to check if it is less than."}}
{"description":"Decomposes a 4x4 transformation matrix into its translation, rotation and scale components.","input":"A 4x4 transformation matrix encoded as a Float4x4. This matrix represents a transformation in 3D space that combines translation, rotation and scaling.","name":"Math.Decompose","output":"A Table containing the translation, rotation and scale components of the input matrix. translation: The translation component as a Float3. rotation: The rotation component as a quaternion Float4. scale: The scale component as a Float3.","parameters":{}}
{"description":"Validates that the input is a float value and throws an error if it is not. This allows enforcing that a value has the expected type at runtime.","input":"It is the value that needs to be validated as a float.","name":"ExpectFloat","output":"Outputs the input float value unchanged if validation succeeds.","parameters":{}}
{"description":"Converts depth from project space to a linear 0-1 range based on the near and far plane distances.","input":"A depth value in projection space represented as a float number. This is used as the input to the linearization calculation.","name":"Shader.LinearizeDepth","output":"The linearized depth value in a 0-1 range, represented as a float number. This is the result of the linearization calculation on the input.","parameters":{}}
{"description":"Validates that the input matches the expected type specified by the Type parameter. If the types don't match, an error is thrown.","input":"The value to validate.","name":"Expect","output":"The input unchanged.","parameters":{"Type":"The expected type for the input. Represented as @type(Type::<type>).","Unsafe":"If true, performs a faster but less robust validation, skipping the slower deep comparison between more complex types like tables."}}
{"description":"Reverses the byte order of a 64-bit integer input. Also known in a broader sense for the swapping of Endianness of a number - useful when the sender and receiver computer have different Endianness.","input":"A 64-bit integer value. This is the number that will have its byte order reversed.","name":"BitSwap64","output":"A 64-bit integer with its bytes in reversed order compared to the input.","parameters":{}}
{"description":"Takes a variable name as input and outputs the memory address of that variable as output.","input":"A String containing the name of a variable. This is used to look up the variable to get its memory address.","name":"VarAddr","output":"An Int containing the memory address of the input variable. This allows the variable's memory location to be accessed directly.","parameters":{}}
{"description":"Converts the input integer, bytes or string value to its hexadecimal string representation.","input":"Can be an integer, bytes or string value that needs to be converted to an hexadecimal string representation.","name":"ToHex","output":"A string containing the hexadecimal representation of the input value.","parameters":{}}
{"description":"Converts the input value to its string representation.","input":"The value to convert to a string. Can be any type.","name":"ToString","output":"The string representation of the input value.","parameters":{}}
{"description":"Gets the current mouse position in pixels.","input":"None. This shard does not take any input.","name":"Inputs.MousePos","output":"A 2D float vector containing the x and y pixel coordinates of the mouse cursor. This provides the mouse position that can be used for tracking cursor location and movement.","parameters":{}}
{"description":"Reads the contents of the file at the provided path and outputs it as either a string or bytes.","input":"A string containing the path of the file to read.","name":"FS.Read","output":"Either a string or bytes containing the contents of the file, depending on the Bytes parameter.","parameters":{"Bytes":"A boolean parameter that specifies whether to output the file contents as a byte array instead of a string."}}
{"description":"Executes the provided shard(s) when the owning wire is cleaned up, after the wire has finished executing.","input":"Ignored.","name":"OnCleanup","output":"Same as the input, unchanged.","parameters":{"Shards":"The shard(s) to execute on the wire's cleanup. The shard(s) provided cannot suspend wire execution."}}
{"description":"Finds and replaces matching patterns in the input sequence.","input":"A sequence with data that will be searched for matches to replace.","name":"Replace","output":"Similar to the input after replacements have been made.","parameters":{"Patterns":"The patterns to find matches for in the input.","Replacements":"The replacement values to use when a match is found. Can be a single value to replace all matches, or multiple values to replace with respective matches."}}
{"description":"Passes through the input value as the output. It allows accessing an input value explicitly in cases such as a wire input.","input":"Ignored.","name":"Input","output":"The same as the original input value.","parameters":{}}
{"description":"Takes a float or sequence of floats as input. If the input float is NaN (not a number), it will convert it to 0. Otherwise, it will pass through the input unchanged.","input":"Can be a single float or a sequence of floats. The input is not used other than to check if it contains NaN values that need to be converted to 0.","name":"NaNTo0","output":"The same as the input, except any NaN values are converted to 0.","parameters":{}}
{"description":"Sends an event to the event dispatcher specified by the Name parameter. Can optionally specify an ID parameter to differentiate between multiple events with the same name.","input":"Ignored.","name":"Events.Emit","output":"Outputs the input value unchanged.","parameters":{"Name":"The name of the event dispatcher to send the event to."}}
{"description":"Causes the current shard sequence execution to fail and stop with an error.","input":"A string that will be used as the error message when failing. It allows customizing the error message.","name":"Fail","output":"None. Does not produce any output.","parameters":{"Message":"An optional string parameter that overrides the input error message. It allows setting a static error message instead of using the input."}}
{"description":"Immediately ends execution of the current flow or wire, and returns the given value as output. Any shards after Return are not executed.","input":"The input to Return is the value that would be outputted from the current flow or wire. This allows outputting a value computed earlier in the flow/wire.","name":"Return","output":"Does not produce any output. It ends execution early.","parameters":{}}
{"description":"Immediately terminates the execution of the current flow or wire. No further shards are executed after Exit.","input":"The input to Exit is ignored and not used. It can be any value.","name":"Exit","output":"Exit does not produce any output.","parameters":{}}
{"description":"Passes its input through as its output without modifying it. It serves as a no-op placeholder where a shard would be expected.","input":"Serves no purpose other than being passed through to the output.","name":"Pass","output":"Outputs the same value that was provided as its input without modification.","parameters":{}}
{"description":"Applies a shard or sequence of shards to each element in a sequence and outputs the new sequence.","input":"The sequence that will have the function applied to each of its elements.","name":"Map","output":"A new sequence with the result of applying the shard or sequence of shards to each element of the input sequence.","parameters":{"Apply":"The function to apply to each element of the input sequence. It can be a shard or a shard sequence. The element will be passed to this as input and its output will become the new element."}}
{"description":"Checks that its input matches the type of the example value provided in the TypeOf parameter or the output type of the shard provided in the OutputOf parameter.","input":"The value that will be compared against the expected type provided through the parameters.","name":"ExpectLike","output":"Same as the input.","parameters":{"OutputOf":"Evaluates the output type of the given expression. That type will be checked against this shard's input.","TypeOf":"The example value to expect. The type of the constant given here will be checked against this shard's input.","Unsafe":"If we should skip performing deep type hashing and comparison. (generally fast but this might improve performance)."}}
{"description":"Checks if all elements in a sequence or a vector are less than or equal to a given value. Outputs true if so, false otherwise.","input":"A sequence or a vector of any type that will be checked against the given value.","name":"IsAllLessEqual","output":"Boolean indicating if all elements in the input sequence or vector are less than or equal to the given value.","parameters":{"Value":"The value to test against for less than or equal. This can be any type, but must match the type of elements in the input sequence."}}
{"description":"Copies the file or directory specified in the input to the destination path provided. Allows specifying behavior when the destination already exists.","input":"A string containing the source path to copy from.","name":"FS.Copy","output":"The input string unchanged.","parameters":{"Behavior":"What to do if the destination already exists. Possible values","Destination":"The destination path to copy the source to. Can be a file or directory."}}
{"description":"Deserializes bytes into shards data.","input":"Bytes representing serialized or raw data.","name":"FromBytes","output":"Deserialized shards data.","parameters":{}}
{"description":"Checks if the input value is less than or equal to the value specified in the Value parameter. Outputs true if the input is less than or equal to the Value, false otherwise.","input":"Any comparable value such as number, string, etc. One of the values to check if it is less than or equal to the other.","name":"IsLessEqual","output":"A boolean indicating if the input value is less than or equal to the Value.","parameters":{"Value":"The value to compare the input value against to check if the input is less than or equal to it."}}
{"description":"Sets up and runs the graphics renderer for a window. Renders the contents shard provided in the window.","input":"The input to this shard is not used.","name":"GFX.Renderer","output":"None","parameters":{"Contents":"The shard that will be run each frame to render the window contents.","IgnoreCompilationErrors":"Whether shader and pipeline compilation errors should be ignored. If true, fallback rendering will be used in case of errors.","Window":"The window context to run the renderer on."}}
{"description":"Checks if the input value is greater than or equal to the value specified in the Value parameter. Outputs true if the input is greater than or equal to the Value, false otherwise.","input":"Any comparable value such as number, string, etc. One of the values to check if it is greater than or equal to the Value parameter.","name":"IsMoreEqual","output":"A boolean indicating if the input value is greater than or equal to the Value.","parameters":{"Value":"The value to compare the input value against to check if the input is greater than or equal to it."}}
{"description":"Pauses execution of the wire for a specified amount of time before passing through the input unchanged.","input":"Any input value that will be passed through after the pause.","name":"Pause","output":"The original input value, unchanged after the pause.","parameters":{"Time":"A variable or literal with the amount of time in seconds (can be fractional) to pause before passing through the input. Defaults to no pause."}}
{"description":"Checks if two values are not equal. Outputs true if they are not equal, false otherwise. Inequality is determined by comparing the two values.","input":"One of the values to check for inequality.","name":"IsNot","output":"A boolean indicating if the input value is not equal to the value specified in the Value parameter.","parameters":{"Value":"The value to compare against the input value for inequality."}}
{"description":"Adds draw commands for one or more drawables to a draw queue.","input":"One or more GFX.Drawable objects that should be drawn.","name":"GFX.Draw","output":"None.","parameters":{"Queue":"The draw queue to add the draw commands to. If not specified, uses the default draw queue."}}
{"description":"Limits the number of elements in a sequence to the amount specified by the Max parameter.","input":"The sequence that will be limited.","name":"Limit","output":"A new sequence with a limited number of elements as specified by Max. Elements are preserved counting from the start of the input sequence. Max must be an integer greater than or equal to 0.","parameters":{"Max":"The maximum number of elements the output sequence can have."}}
{"description":"Outputs the help text for a given shard in JSON format. The help text describes what the shard does.","input":"A shard's name. This specifies which shard's help text should be outputted.","name":"Shards.Help","output":"A JSON string containing the help text for the shard name in the input.","parameters":{}}
{"description":"Loads a SQLite extension library.","input":"Ignored.","name":"DB.LoadExtension","output":"The input unchanged.","parameters":{"Database":"The database name to connect to.","Path":"The filesystem path to the shared library containing the sqlite extension to load."}}
{"description":"Converts an angle value from radians to degrees.","input":"An angle in radians.","name":"Math.RadiansToDegrees","output":"The input angle converted to degrees.","parameters":{}}
{"description":"Designed to provide a file dialog interface, enabling users to choose files or directories from their filesystem. Its behavior can be adjusted by setting its parameters, such as whether to select a single file, multiple files, or a folder, and to filter the visible files based on their extensions.","input":"No input","name":"FS.FileDialog","output":"Depending on the set parameters, the output can be either a single string representing the path to a selected file, or folder, or a sequence of strings representing the paths to multiple selected files.","parameters":{"CurrentDir":"Sets the current directory for the file dialog. It allows users to specify the directory in which the file dialog will open initially. This parameter can take a single string value, either directly or a variable.","Filters":"Allows users to filter visible files based on their extensions. It can take a sequence of strings, or a single string as input (either directly or by reference). Setting this parameter can restrict the dialog to display only files with specific extensions.","Folder":"Decides whether the dialog should allow users to select a folder instead of a file. When set to true, the file dialog changes to a folder dialog.","Multiple":"Determines whether users can select multiple files instead of just one. When set to true, users can choose multiple files."}}
{"description":"Checks if two values are equal. Outputs true if they are equal, false otherwise. Note that for two sequences to be considered equal or identical they must both contain the same elements and in the same order. For two tables to be considered equal/identical they must both contain the same key/value pairs but the order of these pairs is irrelevant.","input":"One of the values to check for equality.","name":"Is","output":"Indicates if the input value is equal to the value specified in the Value parameter.","parameters":{"Value":"The value to compare against the input value for equality."}}
{"description":"Compresses the input bytes using the Snappy compression algorithm.","input":"Bytes containing the data to be compressed.","name":"Snappy.Compress","output":"Bytes containing the compressed data.","parameters":{}}
{"description":"Designed to monitor and indicate the reception of events from the specified event dispatcher. When activated, it checks if an event of the specified name (and optional ID) has been dispatched since the last check. Instead of collecting the actual events like the Events.Receive shard, it simply outputs a boolean indicating the presence of such an event.","input":"Accepts an input type of None, meaning it acts independently of incoming values and focuses solely on the presence of dispatched events.","name":"Events.Check","output":"If an event with the specified name (and optional ID) was dispatched since the last check, it will output true. If no such event was dispatched, it will output false.","parameters":{"ID":"Can be used to further narrow down the event checking based on a specific ID, especially useful when multiple events share the same name. If no ID is provided, a default mechanism will be used to search for events in the given context.","Name":"Specifies the name of the event dispatcher to monitor. It's a required parameter that can accept values of type String or a variable of type String. The shard will listen to the events dispatched by the specified dispatcher."}}
{"description":"Retrieves the current text in Operating System's clipboard.","input":"Ignored.","name":"UI.GetClipboard","output":"The text currently stored in the Operating System's clipboard.","parameters":{}}
{"description":"The Fast Fourier Transform is an algorithm to compute the Discrete Fourier Transform. Converts a signal from its original domain (time or space) to a representation in the frequency domain.","input":"Accepts sequences of float values, complex numbers (sequence of 2 floats), or single-channel audio. Multi-channel audio buffers will throw an error.","name":"DSP.FFT","output":"Produces a sequence of complex numbers (sequence of 2 floats) representing the frequency domain of the input sequence.","parameters":{}}
{"description":"Allows users to receive events that are dispatched. It listens for events dispatched through the provided event dispatcher name and optional ID, collecting them into a sequence, and outputting them when activated. The shard can be used to differentiate events based on their names and optionally an ID.","input":"Does not expect any input and the type of input it accepts is NoneType. This means it doesn't act upon any specific incoming value, but rather listens for dispatched events.","name":"Events.Receive","output":"A sequence (AnySeqType) of events it has received since the last time it was activated. Each event in the sequence is of the type which has been previously set for the associated event dispatcher.","parameters":{"ID":"Used to differentiate events that share the same name. It can be of type Int, a variable of type Int, or NoneType if an ID is not provided. If not provided, a default ID will be used to search for events based on the context.","Name":"Specifies the name of the event dispatcher to use. It is a required parameter that accepts a String or a variable of type String."}}
{"description":"Writes the given string or bytes to the specified file path, optionally appending or overwriting the file if it already exists.","input":"Absolute or relative path to the file.","name":"FS.Write","output":"The file path written to.","parameters":{"Append":"If true, appends the contents to the end of the file if it already exists.","Contents":"A variable containing the string or bytes to write as the file's content.","Overwrite":"If true, overwrites the file if it already exists."}}
{"description":"Checks if the input value is greater than the value specified in the Value parameter. Outputs true if the input is greater, false otherwise.","input":"Any comparable value such as numbers, strings, etc. One of the values to check if it is greater than the other.","name":"IsMore","output":"A boolean indicating if the input value is greater than the Value.","parameters":{"Value":"The value to compare the input value against to check if the input is greater. Must be of a comparable type to the input value."}}
{"description":"A consumer component designed to listen to broadcast channels. It fetches data from its subscribed channel and outputs them either singularly or as a sequence based on the buffer size. If the broadcast channel is closed, the shard checks if there's any stored data in its buffer and outputs it. If the buffer is empty, it signals the flow to stop and outputs an empty value.","input":"The primary function of the input is to trigger the shard's activation.","name":"Listen","output":"If the buffer size is greater than one, the output will be a sequence containing the buffered values. Otherwise, it will output individual values.","parameters":{"Buffer":"Dictates how many values the shard should buffer before outputting them. If set to 1, the shard will output values immediately upon receipt. If set to a value greater than one, the shard will buffer the values and output them as a sequence once the buffer limit is reached.","Name":"Specifies the name of the channel the shard should listen to.","Type":"Defines the expected type of data the shard will receive. It is essential and should match the data type being broadcasted in the channel."}}
{"description":"Checks if the given path refers to an existing directory.","input":"A string representing a filesystem path. This is the path that will be checked.","name":"FS.IsDirectory","output":"A boolean indicating if the given path exists and is a directory.","parameters":{}}
{"description":"Compares two big integers represented as bytes and outputs a boolean indicating if they are equal.","input":"A big integer represented as bytes to compare. This is one of the two operands.","name":"BigInt.Is","output":"A boolean value indicating if the two operands are equal.","parameters":{"Operand":"The second big integer represented as bytes to compare. This is the second of the two operands as is passed as a variable."}}
